import sys
from queue import PriorityQueue

class PuzzleState:
    """Represents the state of the 8-puzzle game."""

    def __init__(self, board, parent=None, action=None, cost=0):
        self.board = board  # A 3x3 list representing the puzzle state
        self.hashable_board = tuple(tuple(row) for row in board)
        self.parent = parent  # The parent state in the search tree
        self.action = action  # The action that led to this state
        self.cost = cost  # The total cost of reaching this state

    def __lt__(self, other):
        """Defines how to compare two PuzzleState objects based on priority."""
        return self.cost + manhattan_distance(self.board, goal) < other.cost + manhattan_distance(other.board, goal)

    def __str__(self):
        """Returns a string representation of the puzzle state."""
        return "\n".join(" ".join(str(x) for x in row) for row in self.board)
    
    def is_goal(self, goal):
        """Checks if the current state is the goal state."""
        return self.board == goal

    def get_neighbors(self):
        """Generates all possible next states (neighbors) from the current state."""
        neighbors = []
        blank_row, blank_col = self.find_blank()
        for dr, dc in [(0, 1), (0, -1), (1, 0), (-1, 0)]: ## Right, Left, Down, Up
            new_row, new_col = blank_row + dr, blank_col + dc
            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_board = [row.copy() for row in self.board]
                new_board[blank_row][blank_col], new_board[new_row][new_col] = (
                    new_board[new_row][new_col],
                    new_board[blank_row][blank_col],
                )
                action = f"Move {(new_row, new_col)} to {(blank_row, blank_col)}"
                neighbors.append(PuzzleState(new_board, self, action, self.cost + 1))
        return neighbors

    def find_blank(self):
        """Finds the row and column of the blank tile in the puzzle state."""
        for row in range(3):
            for col in range(3):
                if self.board[row][col] == 0:
                    return row, col

def bfs_search(initial_state, goal):
    """Solves the 8-puzzle using Breadth-First Search (BFS)."""
    frontier = [initial_state]
    explored = set()
    num_states_enqueued = 0

    while frontier:
        state = frontier.pop(0)
        explored.add(state.hashable_board)
        num_states_enqueued += 1

        if state.is_goal(goal):
            return reconstruct_path(state), num_states_enqueued

        for neighbor in state.get_neighbors():
            if neighbor.hashable_board not in explored:
                frontier.append(neighbor)

    return None, num_states_enqueued

def astar_search(initial_state, goal):
    """Solves the 8-puzzle using A* search with Manhattan distance heuristic."""
    frontier = PriorityQueue()
    frontier.put((0, initial_state))
    explored = set()
    came_from = {}
    cost_so_far = {}
    came_from[initial_state.hashable_board] = None
    cost_so_far[initial_state.hashable_board] = 0

    while not frontier.empty():
        state = frontier.get()[1]
        explored.add(state.hashable_board)

        if state.is_goal(goal):
            return reconstruct_path(state), frontier.qsize()

        for neighbor in state.get_neighbors():
            new_cost = cost_so_far[state.hashable_board] + 1
            if neighbor.hashable_board not in explored and new_cost < cost_so_far.get(neighbor.hashable_board, float('inf')):
                came_from[neighbor.hashable_board] = state
                cost_so_far[neighbor.hashable_board] = new_cost
                priority = new_cost + manhattan_distance(neighbor.board, goal)
                frontier.put((priority, neighbor))

    return None, frontier.qsize()

def manhattan_distance(board, goal):
    """Calculates the Manhattan distance heuristic for a given state."""
    distance = 0
    for row in range(3):
        for col in range(3):
            tile = board[row][col]
            if tile != 0:  # Skip the blank tile
                goal_row, goal_col = find_tile(goal, tile)
                distance += abs(row - goal_row) + abs(col - goal_col)
    return distance

def find_tile(board, tile):
    """Finds the row and column of a specific tile in the puzzle state."""
    for row in range(3):
        for col in range(3):
            if board[row][col] == tile:
                return row, col

def reconstruct_path(state):
    """Reconstructs the sequence of actions to reach the goal state."""
    path = []
    while state:
        path.append(( state, state.action ))
        state = state.parent
    return path[::-1]  # Reverse the path to get the correct order

def getInvCount(arr):
    inv_count = 0
    empty_value = 0
    for i in range(0, 9):
        for j in range(i + 1, 9):
            if arr[j] != empty_value and arr[i] != empty_value and arr[i] > arr[j]:
                inv_count += 1
    return inv_count
 
 



# This function returns true
# if given 8 puzzle is solvable.
def is_solvable(puzzle) :
 
    # Count inversions in given 8 puzzle
    inv_count = getInvCount([j for sub in puzzle for j in sub])
 
    # return true if inversion count is even.
    return (inv_count % 2 == 0), inv_count

if __name__ == "__main__":
    initial_state = [[1, 8, 2], [0, 4, 3], [7, 6, 5]]
    goal = [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

    solvable, inv_count = is_solvable(initial_state)
    if not solvable:
        print("\n".join(" ".join(str(x) for x in row) for row in initial_state))
        print(f"Puzzle is not solvable because the number of inversions is odd {inv_count}.\nExiting...")
        sys.exit()


    # Solve using BFS and A* search
    bfs_solution, num_states_explored_bfs = bfs_search(PuzzleState(initial_state), goal)
    astar_solution, num_states_explored_astar = astar_search(PuzzleState(initial_state), goal)

    # Print results
    if bfs_solution:
        print("BFS Solution:")
        for path in bfs_solution:
            print(path[1])
            print(path[0])
        print(f"Number of states explored: {num_states_explored_bfs}")
        print(f"Number of moves: {len(bfs_solution) - 1}")
    else:
        print("BFS: No solution found")

    if astar_solution:
        print("\nA* Search Solution:")
        for path in astar_solution:
            print(path[1])
            print(path[0])
        print(f"Number of states explored: {num_states_explored_astar}")
        print(f"Number of moves: {len(astar_solution) - 1}")
    else:
        print("A* Search: No solution found")